<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
 
   <!--
   Unattended setup: The following variables can be set:
   -  INSTALLDIR: Full path to the installation directory
   -->
 
   <!--
      ====================================================================================
      Defines & Variables
   -->
 
   <!-- Full version number to display -->
   <?define VersionNumber="0.0.0" ?>
   <?define ApplicationName="lindyndns" ?>
   <?define Manufacturer="johnramsden" ?>
   <?define ProductDescription="Linode Dynamic DNS Client" ?>
 
   <!-- Language information -->
   <?define Language="1041" ?>
   <?define Codepage="932" ?>
 
   <!--
   Upgrade code HAS to be the same for all updates.
   Once you've chosen it don't change it.
   -->
   <?define UpgradeCode="43ec1391-ed3e-44c3-86c6-71b14f1ac098" ?>
 
   <!-- The URL for add/remove programs -->
   <?define InfoURL="https://github.com/johnramsden/lindyndns" ?>
 
   <!-- 32-bit / 64-bit variables -->
   <!-- <?if $(var.Platform) = x64 ?> -->
      <?define Win64 = "yes" ?>
      <?define PlatformProgramFilesFolder = "ProgramFiles64Folder" ?>
      <?define lindyndnsExeSourcePath = "target\x86_64-pc-windows-msvc\release\lindyndns" ?>
   <!-- <?else ?>
      <?define Win64 = "no" ?>
      <?define PlatformProgramFilesFolder = "ProgramFilesFolder" ?>
      <?define lindyndnsExeSourcePath = "$(var.ProjectDir)..\uberAgent\Win32\Release\uberAgent.exe" ?>
   <?endif ?> -->
 
   <!--
      ====================================================================================
      Package start
   -->
 
   <!-- The upgrade code must never change as long as the product lives! -->
   <!-- Product IDs must be autogenerated (*) or else major upgrades will not work -->
   <Product Id="*" Name="$(var.ApplicationName)" Language="$(var.Language)" Version="$(var.VersionNumber)" Manufacturer="$(var.Manufacturer)" UpgradeCode="$(var.UpgradeCode)" >
 
      <!-- Package IDs are valid for a single package version only - they are autogenerated by WiX -->
      <!-- And ALWAYS install per machine!!! -->
      <Package Id="*" Compressed="yes" InstallScope="perMachine"  Description="$(var.ProductDescription)" Comments="lindyndns $(var.VersionNumber)" />
 
      <!-- This is the main installer sequence run when the product is actually installed -->
      <InstallExecuteSequence>
 
         <!-- Determine the install location after the install path has been validated by the installer -->
         <Custom Action="SetARPINSTALLLOCATION" After="InstallValidate"></Custom>
 
      </InstallExecuteSequence>
 
      <!-- Set up ARPINSTALLLOCATION property (http://blogs.technet.com/b/alexshev/archive/2008/02/09/from-msi-to-wix-part-2.aspx) -->
      <CustomAction Id="SetARPINSTALLLOCATION" Property="ARPINSTALLLOCATION" Value="[INSTALLDIR]" />
 
      <!-- 
         2. Check OS bitness
            Unfortunately 32-bit MSI packages cannot write to 64-bit ProgramFiles directory. That is the only reason we need separate MSIs for 32-bit and 64-bit.
      -->
      <?if $(var.Platform) = x86 ?>
         <Condition Message="Installation requires 64 bit OS">
            <![CDATA[NOT VersionNT64]]>
         </Condition>
      <?endif?>
      <!-- 
         Launch conditions end
      -->
 
      <!-- Save the command line value INSTALLDIR and restore it later in the sequence or it will be overwritten by the value saved to the registry during an upgrade -->
      <!-- http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/ -->
      <CustomAction Id='SaveCmdLineValueINSTALLDIR' Property='CMDLINE_INSTALLDIR' Value='[INSTALLDIR]' Execute='firstSequence' />
      <CustomAction Id='SetFromCmdLineValueINSTALLDIR' Property='INSTALLDIR' Value='[CMDLINE_INSTALLDIR]' Execute='firstSequence' />
      <InstallUISequence>
         <Custom Action='SaveCmdLineValueINSTALLDIR' Before='AppSearch' />
         <Custom Action='SetFromCmdLineValueINSTALLDIR' After='AppSearch'>
            CMDLINE_INSTALLDIR
         </Custom>
      </InstallUISequence>
      <InstallExecuteSequence>
         <Custom Action='SaveCmdLineValueINSTALLDIR' Before='AppSearch' />
         <Custom Action='SetFromCmdLineValueINSTALLDIR' After='AppSearch'>
            CMDLINE_INSTALLDIR
         </Custom>
      </InstallExecuteSequence>
 
      <!-- Determine the directory of a previous installation (if one exists). If not INSTALLDIR stays empty -->
      <Property Id="INSTALLDIR">
         <RegistrySearch Id="DetermineInstallLocation" Type="raw" Root="HKLM" Key="Software\$(var.Manufacturer)\InstalledProducts\!(loc.ApplicationName)" Name="InstallLocation" />
      </Property>
 
      <!--
         ====================================================================================
         Start to build directory structure
      -->
 
      <!-- We do not have more than one medium (Floppy, CD, ...). Everything in one file. -->
      <Media Id="1" Cabinet="media.cab" EmbedCab="yes" />
 
      <!-- Outermost folder (kind of virtual). Fixed entry. -->
      <Directory Id="TARGETDIR" Name="SourceDir">
 
         <!-- We start building our directory structure here -->
         <!-- "ProgramFilesFolder" is a variable containing the absolute path. -->
         <!-- For a list of folder variables, see: http://msdn.microsoft.com/en-us/library/aa372057%28VS.85%29.aspx -->
         <Directory Id="$(var.PlatformProgramFilesFolder)">
 
            <!-- All folders from here on are relative to their parent. -->
 
            <Directory Id="ProgramFilesHK" Name="$(var.Manufacturer)">
 
               <!-- INSTALLDIR is a property name. We need it later for the UI (to be able to change the install dir. -->
               <Directory Id="INSTALLDIR" Name="$(var.ApplicationName)">
 
                  <!-- Define components, the building blocks of MSIs. -->
                  <!-- Rule: A component should only contain items that belong together so strongly that they always need to be installed or removed together. -->
                  <!-- If this means a single file, then your components will contain a single file each. This is not only normal but exactly what you're -->
                  <!-- to do. Don't be afraid, Windows Installer can efficiently handle thousands of components or more, if needed. -->
 
                  <!-- Installation directory as a component so it can be emptied during uninstall (by default files added by someone other than Windows Installer are not removed) -->
                  <Component Id="INSTALLDIR_comp" Guid="e46ec012-a7f5-443f-8065-2a372a479242">
                     <CreateFolder />
                     <RemoveFile Id="RemoveFilesFromAppDirectory" Name="*.*" On="uninstall" />
                  </Component>
 
                  <!-- Main program file -->
                  <Component Id="lundyndns.exe_comp" Guid="*" Win64="$(var.Win64)">
 
                     <File Source="$(var.lindyndnsExeSourcePath)" Id="lindyndnsExe" KeyPath="yes" />

                  </Component>
 
                  <!-- Configuration file -->
                  <Component Id="uberAgent.conf_comp" Guid="e46ec012-a7f5-443f-8065-2a372a479242">
 
                     <File Source="packaging\config.toml" Id="linodeConfig" KeyPath="yes" />
 
                  </Component>
 
               </Directory>
            </Directory>
         </Directory>
 
         <!-- Registry entries -->
         <Component Id="RegValInstallLocation_comp" Guid="e46ec012-a7f5-443f-8065-2a372a479242">
            <!-- Do NOT use the application's default registry key here, because THIS key will be removed on uninstall
                 (important when installing a newer version, because that is uninstall followed by install) -->
            <RegistryKey Root="HKLM" Key="Software\$(var.ManufacturerName)\InstalledProducts\$(var.ApplicationName)">
               <RegistryValue Name="InstallLocation" Value="[INSTALLDIR]" Type="string" KeyPath="yes" />
            </RegistryKey>
         </Component>
 
      </Directory>
 
      <!--
         End of directory structure
         ====================================================================================
      -->
 
      <UI>
         <!-- Define the installer UI -->
         <UIRef Id="WixUI_HK" />
      </UI>
 
      <Property Id="WIXUI_INSTALLDIR" Value="INSTALLDIR" />
      <Property Id="WIXUI_SERVERS" Value="SERVERS" />
 
   </Product>
 
</Wix>
